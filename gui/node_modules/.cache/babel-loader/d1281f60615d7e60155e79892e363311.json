{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const moduleSlice = createSlice({\n  name: \"module\",\n  initialState: {\n    modules: [],\n    loading: false,\n    error: null\n  },\n  reducers: {\n    getModulesStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    getModulesSuccess: (state, action) => {\n      state.modules = action.payload;\n      state.loading = false;\n      state.error = null;\n    },\n    getModulesFail: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    createModuleStart: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    createModuleSuccess: state => {\n      state.error = null;\n      state.loading = false;\n    },\n    createModuleFail: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  getModulesFail,\n  getModulesStart,\n  getMoodulesSuccess,\n  createModuleFail,\n  createModuleStart,\n  createModuleSuccess\n} = moduleSlice.actions;\nexport const getModules = token => {\n  return dispatch => {\n    dispatch(getModulesStart());\n    axios.defaults.headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Token ${token}`\n    };\n    axios.get(`http://127.0.0.1:8000/api/modules`).then(res => {\n      dispatch(getModulesSuccess(res.data));\n    }).catch(err => {\n      dispatch(getModulesFail(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Raivex/Documents/React/Project/gui/src/features/moduleSlice.js"],"names":["createSlice","axios","moduleSlice","name","initialState","modules","loading","error","reducers","getModulesStart","state","getModulesSuccess","action","payload","getModulesFail","createModuleStart","createModuleSuccess","createModuleFail","getMoodulesSuccess","actions","getModules","token","dispatch","defaults","headers","Authorization","get","then","res","data","catch","err","message"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,WAAW,GAAGF,WAAW,CAAC;AACrCG,EAAAA,IAAI,EAAE,QAD+B;AAErCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,EADG;AAEZC,IAAAA,OAAO,EAAE,KAFG;AAGZC,IAAAA,KAAK,EAAE;AAHK,GAFuB;AAOrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAGC,KAAD,IAAW;AAC1BA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAc,IAAd;AACD,KAJO;AAKRI,IAAAA,iBAAiB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACpCF,MAAAA,KAAK,CAACL,OAAN,GAAgBO,MAAM,CAACC,OAAvB;AACAH,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAc,IAAd;AACD,KATO;AAURO,IAAAA,cAAc,EAAE,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AACjCF,MAAAA,KAAK,CAACH,KAAN,GAAcK,MAAM,CAACC,OAArB;AACAH,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACD,KAbO;AAcRS,IAAAA,iBAAiB,EAAGL,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAc,IAAd;AACD,KAjBO;AAkBRS,IAAAA,mBAAmB,EAAGN,KAAD,IAAW;AAC9BA,MAAAA,KAAK,CAACH,KAAN,GAAc,IAAd;AACAG,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACD,KArBO;AAsBRW,IAAAA,gBAAgB,EAAE,CAACP,KAAD,EAAQE,MAAR,KAAmB;AACnCF,MAAAA,KAAK,CAACH,KAAN,GAAcK,MAAM,CAACC,OAArB;AACAH,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACD;AAzBO;AAP2B,CAAD,CAA/B;AAoCP,OAAO,MAAM;AACXQ,EAAAA,cADW;AAEXL,EAAAA,eAFW;AAGXS,EAAAA,kBAHW;AAIXD,EAAAA,gBAJW;AAKXF,EAAAA,iBALW;AAMXC,EAAAA;AANW,IAOTd,WAAW,CAACiB,OAPT;AASP,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAW;AACnC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACb,eAAe,EAAhB,CAAR;AACAR,IAAAA,KAAK,CAACsB,QAAN,CAAeC,OAAf,GAAyB;AACvB,sBAAgB,kBADO;AAEvBC,MAAAA,aAAa,EAAG,SAAQJ,KAAM;AAFP,KAAzB;AAIApB,IAAAA,KAAK,CACFyB,GADH,CACQ,mCADR,EAEGC,IAFH,CAESC,GAAD,IAAS;AACbN,MAAAA,QAAQ,CAACX,iBAAiB,CAACiB,GAAG,CAACC,IAAL,CAAlB,CAAR;AACD,KAJH,EAKGC,KALH,CAKUC,GAAD,IAAS;AACdT,MAAAA,QAAQ,CAACR,cAAc,CAACiB,GAAG,CAACC,OAAL,CAAf,CAAR;AACD,KAPH;AAQD,GAdD;AAeD,CAhBM","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nexport const moduleSlice = createSlice({\r\n  name: \"module\",\r\n  initialState: {\r\n    modules: [],\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    getModulesStart: (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n    getModulesSuccess: (state, action) => {\r\n      state.modules = action.payload;\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n    getModulesFail: (state, action) => {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n    createModuleStart: (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n    createModuleSuccess: (state) => {\r\n      state.error = null;\r\n      state.loading = false;\r\n    },\r\n    createModuleFail: (state, action) => {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  getModulesFail,\r\n  getModulesStart,\r\n  getMoodulesSuccess,\r\n  createModuleFail,\r\n  createModuleStart,\r\n  createModuleSuccess,\r\n} = moduleSlice.actions;\r\n\r\nexport const getModules = (token) => {\r\n  return (dispatch) => {\r\n    dispatch(getModulesStart());\r\n    axios.defaults.headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Token ${token}`,\r\n    };\r\n    axios\r\n      .get(`http://127.0.0.1:8000/api/modules`)\r\n      .then((res) => {\r\n        dispatch(getModulesSuccess(res.data));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getModulesFail(err.message));\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}