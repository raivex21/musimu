{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Raivex\\\\Desktop\\\\THESIS\\\\musimu\\\\gui\\\\src\\\\simulator\\\\WorkSheet.js\",\n    _s = $RefreshSig$();\n\n//import React, { Component } from \"react\";\nimport Task from \"./Task\"; // class WorkSheet extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       task: [],\n//       taskKind: null,\n//       taskCondition: null,\n//       clef: null,\n//       up: null,\n//       down: null,\n//       clefList: false,\n//       timeSigList: false,\n//       keySigList: false,\n//       iSBool: false,\n//       aaa: 0,\n//     };\n//   }\n//   taskList = () => {\n//     let task = this.state.task;\n//     let taskCondition = this.state.taskCondition;\n//     let idNum = 1;\n//     if (task.length !== null) {\n//       idNum = task.length + 1;\n//     }\n//     if (this.state.taskKind === \"time Signature\") {\n//       task.push({\n//         idNum: idNum,\n//         taskCondition: \"Set up time signature to\",\n//         up: this.state.up,\n//         down: this.state.down,\n//         taskKind: this.state.taskKind,\n//       });\n//     } else {\n//       if (\n//         this.state.taskCondition === null ||\n//         this.state.taskCondition === \"none\"\n//       ) {\n//         console.log(\"Insert something\");\n//         this.setState({\n//           iSBool: true,\n//         });\n//         return;\n//       } else {\n//         this.setState({\n//           iSBool: false,\n//         });\n//         task.push({\n//           idNum: idNum,\n//           taskCondition: taskCondition,\n//           taskKind: this.state.taskKind,\n//         });\n//       }\n//     }\n//     this.setState({\n//       task,\n//       taskKind: null,\n//       taskCondition: null,\n//       clef: null,\n//       up: null,\n//       down: null,\n//     });\n//     console.log(this.state.task);\n//   };\n//   handleChangeTask = (event) => {\n//     this.setState({\n//       taskKind: event.target.value,\n//       clefList: false,\n//       keySigList: false,\n//       timeSigList: false,\n//     });\n//   };\n//   handleTaskSelect = () => {\n//     if (this.state.taskKind === \"clef\") {\n//       this.setState({\n//         clefList: true,\n//         timeSigList: false,\n//         keySigList: false,\n//       });\n//     }\n//     if (this.state.taskKind === \"time Signature\") {\n//       this.setState({\n//         clefList: false,\n//         timeSigList: true,\n//         keySigList: false,\n//       });\n//     }\n//     if (this.state.taskKind === \"key Signature\") {\n//       this.setState({\n//         clefList: false,\n//         timeSigList: false,\n//         keySigList: true,\n//       });\n//     }\n//     console.log(\n//       this.state.clefList,\n//       this.state.timeSigList,\n//       this.state.keySigList\n//     );\n//   };\n//   handleTaskCondition = (event) => {\n//     this.setState({\n//       taskCondition: event.target.value,\n//     });\n//   };\n//   handleConditions = (event) => {\n//     this.setState({\n//       taskCondition: event.target.value,\n//     });\n//   };\n//   keySigUp = (event) => {\n//     this.setState({\n//       up: parseInt(event.target.value),\n//     });\n//   };\n//   keySigDown = (event) => {\n//     this.setState({\n//       down: parseInt(event.target.value),\n//     });\n//   };\n//   removeTask = (taskNum) => {\n//     let task = this.state.task;\n//     let curTaskNum = taskNum - 1;\n//     console.log(\"Delet dis\", curTaskNum);\n//     task.splice(curTaskNum, 1);\n//     console.log(task[curTaskNum], task.length);\n//     for (let i = curTaskNum; i < task.length; i++) {\n//       console.log(task[i].idNum, i, task.length);\n//       task[i].idNum = i + 1;\n//     }\n//     this.setState({\n//       task,\n//     });\n//   };\n//   render() {\n//     let task = this.state.task.map((task, index) => {\n//       return (\n//         <Task\n//           timeSig={task}\n//           key={index}\n//           addCondition={this.addCondition}\n//           removeTask={this.removeTask}\n//         />\n//       );\n//     });\n//     return (\n//       <div className=\"tool__tasks\">\n//         <div>\n//           <label>Choose a Task for:</label>\n//           <select onChange={this.handleChangeTask}>\n//             <option></option>\n//             <option value=\"clef\">Clef</option>\n//             <option value=\"time Signature\">Time Signature</option>\n//             <option value=\"key Signature\">Key Signature</option>\n//           </select>\n//           <button onClick={this.handleTaskSelect}>Select</button>\n//         </div>{\" \"}\n//         <br />\n//         {this.state.iSBool ? <div>Insert Something</div> : null}\n//         {this.state.clefList ? (\n//           <div>\n//             <label>Create a condition for clef:</label>\n//             <select onChange={this.handleConditions}>\n//               <option value=\"none\">Select</option>\n//               <option value=\"Set up a G clef\">Set up a G clef</option>\n//               <option value=\"Set up a F clef\">Set up a F clef</option>\n//             </select>\n//             <button onClick={() => this.taskList()}>Create Task</button>\n//           </div>\n//         ) : null}\n//         {this.state.timeSigList ? (\n//           <div>\n//             <label>\n//               Create a condition for time signature:\n//               <br /> Make a{this.state.up} <br />\n//               {this.state.down} <br />\n//               time signature\n//             </label>\n//             <div>\n//               Time Signature\n//               <button\n//                 onClick={() => this.setState({ up: 4, down: 4, handle: 0 })}\n//               >\n//                 4/4\n//               </button>\n//               <button\n//                 onClick={() => this.setState({ up: 3, down: 4, handle: 0 })}\n//               >\n//                 3/4\n//               </button>\n//               <button\n//                 onClick={() => this.setState({ up: 2, down: 4, handle: 0 })}\n//               >\n//                 2/4\n//               </button>\n//               Custom Up\n//               <input\n//                 type=\"number\"\n//                 defaultValue=\"4\"\n//                 min=\"1\"\n//                 max=\"20\"\n//                 onChange={this.keySigUp.bind(this)}\n//               />\n//               Down\n//               <select onChange={this.keySigDown}>\n//                 <option value=\"1\">1</option>\n//                 <option value=\"2\">2</option>\n//                 <option value=\"4\">4</option>\n//                 <option value=\"8\">8</option>\n//                 <option value=\"16\">16</option>\n//               </select>\n//             </div>\n//             <button onClick={() => this.taskList()}>Create Task</button>\n//           </div>\n//         ) : null}\n//         {this.state.keySigList ? (\n//           <div>\n//             <label>Create a condition for key signature: Set up key of</label>\n//             <select value=\"null\" onChange={this.handleConditions}>\n//               {\" \"}\n//               key\n//               <option value=\"none\">Select</option>\n//               <option value=\"Set key signature to key of C\">C</option>\n//               <option value=\"Set key signature to key of D\">D</option>\n//               <option value=\"Set key signature to key of E\">E</option>\n//               <option value=\"Set key signature to key of F\">F</option>\n//               <option value=\"Set key signature to key of G\">G</option>\n//               <option value=\"Set key signature to key of A\">A</option>\n//               <option value=\"Set key signature to key of B\">B</option>\n//             </select>\n//             <button onClick={() => this.taskList()}>Create Task</button>\n//           </div>\n//         ) : null}\n//         {task}\n//       </div>\n//     );\n//   }\n// }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getTaskList, getTask } from \"../features/taskSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WorkSheet() {\n  _s();\n\n  const dispatch = useDispatch();\n  const tasks = useSelector(state => state.task.taskList);\n  const task = useSelector(state => state.task.task);\n  const {\n    token\n  } = useSelector(state => state.auth);\n  const [selected, setSelected] = useState(null);\n  useEffect(() => {\n    dispatch(getTaskList(token));\n    dispatch(getTask(token, selected));\n  }, []);\n\n  const handleSelect = id => {\n    console.log(id);\n    setSelected(id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sim-task\",\n    children: selected === null ? tasks && tasks.map(x => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleSelect(x.id),\n      className: \"task-item\",\n      children: x.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-detail\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: () => setSelected(null),\n        children: \"All Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), task.conditions.map(list => list.name)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WorkSheet, \"M3ZQSe0sJ1US4EjQ9vn7T22bGEU=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = WorkSheet;\nexport default WorkSheet;\n\nvar _c;\n\n$RefreshReg$(_c, \"WorkSheet\");","map":{"version":3,"sources":["C:/Users/Raivex/Desktop/THESIS/musimu/gui/src/simulator/WorkSheet.js"],"names":["Task","React","useEffect","useState","useSelector","useDispatch","getTaskList","getTask","WorkSheet","dispatch","tasks","state","task","taskList","token","auth","selected","setSelected","handleSelect","id","console","log","map","x","name","conditions","list"],"mappings":";;;AAAA;AACA,OAAOA,IAAP,MAAiB,QAAjgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,uBAArC;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAMK,KAAK,GAAGN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,QAAvB,CAAzB;AACA,QAAMD,IAAI,GAAGR,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWA,IAAvB,CAAxB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAYV,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACI,IAAlB,CAA7B;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,IAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ,CAACH,WAAW,CAACQ,KAAD,CAAZ,CAAR;AACAL,IAAAA,QAAQ,CAACF,OAAO,CAACO,KAAD,EAAQE,QAAR,CAAR,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAME,YAAY,GAAIC,EAAD,IAAQ;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACAF,IAAAA,WAAW,CAACE,EAAD,CAAX;AACD,GAHD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,cACGH,QAAQ,KAAK,IAAb,GACCN,KAAK,IACLA,KAAK,CAACY,GAAN,CAAWC,CAAD,iBACR;AAAK,MAAA,OAAO,EAAE,MAAML,YAAY,CAACK,CAAC,CAACJ,EAAH,CAAhC;AAAwC,MAAA,SAAS,EAAC,WAAlD;AAAA,gBACGI,CAAC,CAACC;AADL;AAAA;AAAA;AAAA;AAAA,YADF,CAFD,gBAQC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAE,MAAMP,WAAW,CAAC,IAAD,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAKGL,IAAI,CAACa,UAAL,CAAgBH,GAAhB,CAAqBI,IAAD,IAAUA,IAAI,CAACF,IAAnC,CALH;AAAA;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GApCQhB,S;UACUH,W,EACHD,W,EACDA,W,EACKA,W;;;KAJXI,S;AAsCT,eAAeA,SAAf","sourcesContent":["//import React, { Component } from \"react\";\r\nimport Task from \"./Task\";\r\n\r\n// class WorkSheet extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n\r\n//     this.state = {\r\n//       task: [],\r\n//       taskKind: null,\r\n//       taskCondition: null,\r\n//       clef: null,\r\n//       up: null,\r\n//       down: null,\r\n//       clefList: false,\r\n//       timeSigList: false,\r\n//       keySigList: false,\r\n\r\n//       iSBool: false,\r\n//       aaa: 0,\r\n//     };\r\n//   }\r\n\r\n//   taskList = () => {\r\n//     let task = this.state.task;\r\n//     let taskCondition = this.state.taskCondition;\r\n//     let idNum = 1;\r\n//     if (task.length !== null) {\r\n//       idNum = task.length + 1;\r\n//     }\r\n\r\n//     if (this.state.taskKind === \"time Signature\") {\r\n//       task.push({\r\n//         idNum: idNum,\r\n//         taskCondition: \"Set up time signature to\",\r\n//         up: this.state.up,\r\n//         down: this.state.down,\r\n//         taskKind: this.state.taskKind,\r\n//       });\r\n//     } else {\r\n//       if (\r\n//         this.state.taskCondition === null ||\r\n//         this.state.taskCondition === \"none\"\r\n//       ) {\r\n//         console.log(\"Insert something\");\r\n//         this.setState({\r\n//           iSBool: true,\r\n//         });\r\n//         return;\r\n//       } else {\r\n//         this.setState({\r\n//           iSBool: false,\r\n//         });\r\n\r\n//         task.push({\r\n//           idNum: idNum,\r\n//           taskCondition: taskCondition,\r\n//           taskKind: this.state.taskKind,\r\n//         });\r\n//       }\r\n//     }\r\n\r\n//     this.setState({\r\n//       task,\r\n//       taskKind: null,\r\n//       taskCondition: null,\r\n//       clef: null,\r\n//       up: null,\r\n//       down: null,\r\n//     });\r\n//     console.log(this.state.task);\r\n//   };\r\n\r\n//   handleChangeTask = (event) => {\r\n//     this.setState({\r\n//       taskKind: event.target.value,\r\n//       clefList: false,\r\n//       keySigList: false,\r\n//       timeSigList: false,\r\n//     });\r\n//   };\r\n\r\n//   handleTaskSelect = () => {\r\n//     if (this.state.taskKind === \"clef\") {\r\n//       this.setState({\r\n//         clefList: true,\r\n//         timeSigList: false,\r\n//         keySigList: false,\r\n//       });\r\n//     }\r\n//     if (this.state.taskKind === \"time Signature\") {\r\n//       this.setState({\r\n//         clefList: false,\r\n//         timeSigList: true,\r\n//         keySigList: false,\r\n//       });\r\n//     }\r\n//     if (this.state.taskKind === \"key Signature\") {\r\n//       this.setState({\r\n//         clefList: false,\r\n//         timeSigList: false,\r\n//         keySigList: true,\r\n//       });\r\n//     }\r\n//     console.log(\r\n//       this.state.clefList,\r\n//       this.state.timeSigList,\r\n//       this.state.keySigList\r\n//     );\r\n//   };\r\n\r\n//   handleTaskCondition = (event) => {\r\n//     this.setState({\r\n//       taskCondition: event.target.value,\r\n//     });\r\n//   };\r\n\r\n//   handleConditions = (event) => {\r\n//     this.setState({\r\n//       taskCondition: event.target.value,\r\n//     });\r\n//   };\r\n\r\n//   keySigUp = (event) => {\r\n//     this.setState({\r\n//       up: parseInt(event.target.value),\r\n//     });\r\n//   };\r\n\r\n//   keySigDown = (event) => {\r\n//     this.setState({\r\n//       down: parseInt(event.target.value),\r\n//     });\r\n//   };\r\n\r\n//   removeTask = (taskNum) => {\r\n//     let task = this.state.task;\r\n//     let curTaskNum = taskNum - 1;\r\n//     console.log(\"Delet dis\", curTaskNum);\r\n//     task.splice(curTaskNum, 1);\r\n\r\n//     console.log(task[curTaskNum], task.length);\r\n//     for (let i = curTaskNum; i < task.length; i++) {\r\n//       console.log(task[i].idNum, i, task.length);\r\n//       task[i].idNum = i + 1;\r\n//     }\r\n\r\n//     this.setState({\r\n//       task,\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n//     let task = this.state.task.map((task, index) => {\r\n//       return (\r\n//         <Task\r\n//           timeSig={task}\r\n//           key={index}\r\n//           addCondition={this.addCondition}\r\n//           removeTask={this.removeTask}\r\n//         />\r\n//       );\r\n//     });\r\n//     return (\r\n//       <div className=\"tool__tasks\">\r\n//         <div>\r\n//           <label>Choose a Task for:</label>\r\n//           <select onChange={this.handleChangeTask}>\r\n//             <option></option>\r\n//             <option value=\"clef\">Clef</option>\r\n//             <option value=\"time Signature\">Time Signature</option>\r\n//             <option value=\"key Signature\">Key Signature</option>\r\n//           </select>\r\n//           <button onClick={this.handleTaskSelect}>Select</button>\r\n//         </div>{\" \"}\r\n//         <br />\r\n//         {this.state.iSBool ? <div>Insert Something</div> : null}\r\n//         {this.state.clefList ? (\r\n//           <div>\r\n//             <label>Create a condition for clef:</label>\r\n//             <select onChange={this.handleConditions}>\r\n//               <option value=\"none\">Select</option>\r\n//               <option value=\"Set up a G clef\">Set up a G clef</option>\r\n//               <option value=\"Set up a F clef\">Set up a F clef</option>\r\n//             </select>\r\n//             <button onClick={() => this.taskList()}>Create Task</button>\r\n//           </div>\r\n//         ) : null}\r\n//         {this.state.timeSigList ? (\r\n//           <div>\r\n//             <label>\r\n//               Create a condition for time signature:\r\n//               <br /> Make a{this.state.up} <br />\r\n//               {this.state.down} <br />\r\n//               time signature\r\n//             </label>\r\n\r\n//             <div>\r\n//               Time Signature\r\n//               <button\r\n//                 onClick={() => this.setState({ up: 4, down: 4, handle: 0 })}\r\n//               >\r\n//                 4/4\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => this.setState({ up: 3, down: 4, handle: 0 })}\r\n//               >\r\n//                 3/4\r\n//               </button>\r\n//               <button\r\n//                 onClick={() => this.setState({ up: 2, down: 4, handle: 0 })}\r\n//               >\r\n//                 2/4\r\n//               </button>\r\n//               Custom Up\r\n//               <input\r\n//                 type=\"number\"\r\n//                 defaultValue=\"4\"\r\n//                 min=\"1\"\r\n//                 max=\"20\"\r\n//                 onChange={this.keySigUp.bind(this)}\r\n//               />\r\n//               Down\r\n//               <select onChange={this.keySigDown}>\r\n//                 <option value=\"1\">1</option>\r\n//                 <option value=\"2\">2</option>\r\n//                 <option value=\"4\">4</option>\r\n//                 <option value=\"8\">8</option>\r\n//                 <option value=\"16\">16</option>\r\n//               </select>\r\n//             </div>\r\n//             <button onClick={() => this.taskList()}>Create Task</button>\r\n//           </div>\r\n//         ) : null}\r\n//         {this.state.keySigList ? (\r\n//           <div>\r\n//             <label>Create a condition for key signature: Set up key of</label>\r\n\r\n//             <select value=\"null\" onChange={this.handleConditions}>\r\n//               {\" \"}\r\n//               key\r\n//               <option value=\"none\">Select</option>\r\n//               <option value=\"Set key signature to key of C\">C</option>\r\n//               <option value=\"Set key signature to key of D\">D</option>\r\n//               <option value=\"Set key signature to key of E\">E</option>\r\n//               <option value=\"Set key signature to key of F\">F</option>\r\n//               <option value=\"Set key signature to key of G\">G</option>\r\n//               <option value=\"Set key signature to key of A\">A</option>\r\n//               <option value=\"Set key signature to key of B\">B</option>\r\n//             </select>\r\n\r\n//             <button onClick={() => this.taskList()}>Create Task</button>\r\n//           </div>\r\n//         ) : null}\r\n//         {task}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getTaskList, getTask } from \"../features/taskSlice\";\r\n\r\nfunction WorkSheet() {\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector((state) => state.task.taskList);\r\n  const task = useSelector((state) => state.task.task);\r\n  const { token } = useSelector((state) => state.auth);\r\n  const [selected, setSelected] = useState(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(getTaskList(token));\r\n    dispatch(getTask(token, selected));\r\n  }, []);\r\n\r\n  const handleSelect = (id) => {\r\n    console.log(id);\r\n    setSelected(id);\r\n  };\r\n  return (\r\n    <div className=\"sim-task\">\r\n      {selected === null ? (\r\n        tasks &&\r\n        tasks.map((x) => (\r\n          <div onClick={() => handleSelect(x.id)} className=\"task-item\">\r\n            {x.name}\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div className=\"task-detail\">\r\n          <button className=\"back-button\" onClick={() => setSelected(null)}>\r\n            All Tasks\r\n          </button>\r\n\r\n          {task.conditions.map((list) => list.name)}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorkSheet;\r\n"]},"metadata":{},"sourceType":"module"}