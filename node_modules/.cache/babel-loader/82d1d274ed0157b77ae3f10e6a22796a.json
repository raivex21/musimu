{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Raivex\\\\Documents\\\\React\\\\Project\\\\gui\\\\src\\\\components\\\\Quiz\\\\QuizDetail.js\",\n    _s = $RefreshSig$();\n\nimport { Button, TextField, Typography } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getQuizDetail } from \"../../features/quizSlice\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    minWidth: \"50%\",\n    margin: \"10px 0\"\n  },\n  textField: {\n    minWidth: \"100%\",\n    margin: \"10px 0\"\n  },\n  buttonStyle: {\n    minWidth: \"100%\",\n    margin: \"10px 0\",\n    height: \"3rem\"\n  }\n}));\n\nfunction getStyles(name, personName, theme) {\n  return {\n    fontWeight: personName.indexOf(name) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium\n  };\n}\n\nfunction QuizDetail(props) {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [count, setCount] = useState(1);\n  const quizDetail = useSelector(state => state.quiz.quizDetail);\n  const token = useSelector(state => state.auth.token);\n  useEffect(() => {\n    dispatch(getQuizDetail(token, props.id));\n  }, [dispatch, token, props.id]);\n\n  const renderInputs = value => {\n    const inputs = [];\n\n    for (let i = 0; i < value; i++) {\n      inputs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"createQuiz__question\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Question Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: `outlined-basic-${i}`,\n          label: \"Quiz Title\",\n          variant: \"outlined\",\n          className: classes.textField,\n          size: \"small\",\n          multiline: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          className: classes.formControl,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"demo-mutiple-chip-label\",\n            children: \"Chip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"demo-mutiple-chip-label\",\n            id: \"demo-mutiple-chip\",\n            multiple: true,\n            value: personName,\n            onChange: handleChange,\n            input: /*#__PURE__*/_jsxDEV(Input, {\n              id: \"select-multiple-chip\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 22\n            }, this),\n            renderValue: selected => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.chips,\n              children: selected.map(value => /*#__PURE__*/_jsxDEV(Chip, {\n                label: value,\n                className: classes.chip\n              }, value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this),\n            MenuProps: MenuProps,\n            children: names.map(name => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: name,\n              style: getStyles(name, personName, theme),\n              children: name\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this));\n    }\n\n    return inputs;\n  };\n\n  console.log(count);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [quizDetail.name, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"createQuiz\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Add Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), renderInputs(count), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: increment,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(QuizDetail, \"YULy3iAROk/9pbNVxpeoVzz1rBo=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector];\n});\n\n_c = QuizDetail;\nexport default QuizDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizDetail\");","map":{"version":3,"sources":["C:/Users/Raivex/Documents/React/Project/gui/src/components/Quiz/QuizDetail.js"],"names":["Button","TextField","Typography","React","useEffect","useState","useDispatch","useSelector","getQuizDetail","makeStyles","useTheme","useStyles","theme","formControl","minWidth","margin","textField","buttonStyle","height","getStyles","name","personName","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","QuizDetail","props","classes","dispatch","count","setCount","quizDetail","state","quiz","token","auth","id","renderInputs","value","inputs","i","push","handleChange","selected","chips","map","chip","MenuProps","names","console","log","increment"],"mappings":"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","sourcesContent":["import { Button, TextField, Typography } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getQuizDetail } from \"../../features/quizSlice\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    minWidth: \"50%\",\r\n    margin: \"10px 0\",\r\n  },\r\n  textField: {\r\n    minWidth: \"100%\",\r\n    margin: \"10px 0\",\r\n  },\r\n  buttonStyle: {\r\n    minWidth: \"100%\",\r\n    margin: \"10px 0\",\r\n    height: \"3rem\",\r\n  },\r\n}));\r\n\r\nfunction getStyles(name, personName, theme) {\r\n  return {\r\n    fontWeight:\r\n      personName.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\nfunction QuizDetail(props) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [count, setCount] = useState(1);\r\n  const quizDetail = useSelector((state) => state.quiz.quizDetail);\r\n  const token = useSelector((state) => state.auth.token);\r\n\r\n  useEffect(() => {\r\n    dispatch(getQuizDetail(token, props.id));\r\n  }, [dispatch, token, props.id]);\r\n\r\n  const renderInputs = (value) => {\r\n    const inputs = [];\r\n    for (let i = 0; i < value; i++) {\r\n      inputs.push(\r\n        <div className=\"createQuiz__question\">\r\n          <Typography>Question Form</Typography>\r\n          <TextField\r\n            id={`outlined-basic-${i}`}\r\n            label=\"Quiz Title\"\r\n            variant=\"outlined\"\r\n            className={classes.textField}\r\n            size=\"small\"\r\n            multiline\r\n          />\r\n          <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"demo-mutiple-chip-label\">Chip</InputLabel>\r\n            <Select\r\n              labelId=\"demo-mutiple-chip-label\"\r\n              id=\"demo-mutiple-chip\"\r\n              multiple\r\n              value={personName}\r\n              onChange={handleChange}\r\n              input={<Input id=\"select-multiple-chip\" />}\r\n              renderValue={(selected) => (\r\n                <div className={classes.chips}>\r\n                  {selected.map((value) => (\r\n                    <Chip key={value} label={value} className={classes.chip} />\r\n                  ))}\r\n                </div>\r\n              )}\r\n              MenuProps={MenuProps}\r\n            >\r\n              {names.map((name) => (\r\n                <MenuItem\r\n                  key={name}\r\n                  value={name}\r\n                  style={getStyles(name, personName, theme)}\r\n                >\r\n                  {name}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n      );\r\n    }\r\n    return inputs;\r\n  };\r\n  console.log(count);\r\n  const increment = () => {\r\n    setCount(count + 1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {quizDetail.name}\r\n      <div className=\"createQuiz\">\r\n        <Typography variant=\"h6\">Add Questions</Typography>\r\n        {renderInputs(count)}\r\n        <Button onClick={increment}>Add</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizDetail;\r\n"]},"metadata":{},"sourceType":"module"}