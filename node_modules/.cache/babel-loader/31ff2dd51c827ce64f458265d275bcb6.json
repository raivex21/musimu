{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Raivex\\\\Documents\\\\React\\\\Project\\\\gui\\\\src\\\\components\\\\Quiz\\\\QuizViewer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { createGradedQuiz } from \"../../features/gradeSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction QuizViewer(props) {\n  _s();\n\n  var _props$questions, _props$questions2;\n\n  const dispatch = useDispatch();\n  const [answers, setAnswers] = useState({});\n  const {\n    token,\n    userId\n  } = useSelector(state => state.auth);\n\n  const handleSubmit = () => {\n    let score = 0;\n    const answerKeys = Object.keys(answers);\n    const {\n      questions\n    } = props;\n\n    for (let i = 0; i < (questions === null || questions === void 0 ? void 0 : questions.length); i++) {}\n\n    answerKeys.forEach(function (element) {\n      const correctAnswer = questions.filter(item => item.id == element);\n\n      if (answers[element] == correctAnswer[0].answer) {\n        score += 1;\n      }\n    });\n    let total = questions.length;\n    let grade = score / total * 100;\n    const formData = new FormData();\n    formData.append(\"total\", total);\n    formData.append(\"score\", score);\n    formData.append(\"grade\", grade);\n    formData.append(\"student\", userId);\n    formData.append(\"quiz\", props.quizId);\n    dispatch(createGradedQuiz(token, formData));\n  };\n\n  const onChangeAnswer = (e, id) => {\n    answers[id] = e.target.value;\n    setAnswers({ ...answers\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [(_props$questions = props.questions) === null || _props$questions === void 0 ? void 0 : _props$questions.map(item => {\n      var _item$choices_data;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz__question\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question\",\n          children: item.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"choices\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"choices__row\",\n            children: (_item$choices_data = item.choices_data) === null || _item$choices_data === void 0 ? void 0 : _item$choices_data.map(choice => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                onChange: e => onChangeAnswer(e, item.id),\n                className: \"choices__item\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  value: choice.id,\n                  name: item.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: choice.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 52,\n                  columnNumber: 23\n                }, this)]\n              }, choice.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this);\n    }), ((_props$questions2 = props.questions) === null || _props$questions2 === void 0 ? void 0 : _props$questions2.length) !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz__submit\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}\n\n_s(QuizViewer, \"sVO+kM+ynuMKE6M/xdwdcE9g3M4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = QuizViewer;\nexport default QuizViewer;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizViewer\");","map":{"version":3,"sources":["C:/Users/Raivex/Documents/React/Project/gui/src/components/Quiz/QuizViewer.js"],"names":["React","useState","createGradedQuiz","useDispatch","useSelector","QuizViewer","props","dispatch","answers","setAnswers","token","userId","state","auth","handleSubmit","score","answerKeys","Object","keys","questions","i","length","forEach","element","correctAnswer","filter","item","id","answer","total","grade","formData","FormData","append","quizId","onChangeAnswer","e","target","value","map","question","choices_data","choice","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAAA;;AACzB,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAES,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAArC;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACzB,QAAIC,KAAK,GAAG,CAAZ;AACA,UAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYV,OAAZ,CAAnB;AACA,UAAM;AAAEW,MAAAA;AAAF,QAAgBb,KAAtB;;AACA,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAGD,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEE,MAAd,CAAjB,EAAuCD,CAAC,EAAxC,EAA4C,CAAE;;AAC9CJ,IAAAA,UAAU,CAACM,OAAX,CAAmB,UAAUC,OAAV,EAAmB;AACpC,YAAMC,aAAa,GAAGL,SAAS,CAACM,MAAV,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,IAAWJ,OAAtC,CAAtB;;AACA,UAAIf,OAAO,CAACe,OAAD,CAAP,IAAoBC,aAAa,CAAC,CAAD,CAAb,CAAiBI,MAAzC,EAAiD;AAC/Cb,QAAAA,KAAK,IAAI,CAAT;AACD;AACF,KALD;AAMA,QAAIc,KAAK,GAAGV,SAAS,CAACE,MAAtB;AACA,QAAIS,KAAK,GAAIf,KAAK,GAAGc,KAAT,GAAkB,GAA9B;AACA,UAAME,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBJ,KAAzB;AACAE,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBlB,KAAzB;AACAgB,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,KAAzB;AACAC,IAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BtB,MAA3B;AACAoB,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB3B,KAAK,CAAC4B,MAA9B;AACA3B,IAAAA,QAAQ,CAACL,gBAAgB,CAACQ,KAAD,EAAQqB,QAAR,CAAjB,CAAR;AACD,GApBD;;AAsBA,QAAMI,cAAc,GAAG,CAACC,CAAD,EAAIT,EAAJ,KAAW;AAChCnB,IAAAA,OAAO,CAACmB,EAAD,CAAP,GAAcS,CAAC,CAACC,MAAF,CAASC,KAAvB;AACA7B,IAAAA,UAAU,CAAC,EAAE,GAAGD;AAAL,KAAD,CAAV;AACD,GAHD;;AAIA,sBACE;AAAA,mCACGF,KAAK,CAACa,SADT,qDACG,iBAAiBoB,GAAjB,CAAsBb,IAAD,IAAU;AAAA;;AAC9B,0BACE;AAAmB,QAAA,SAAS,EAAC,gBAA7B;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,oBAA2BA,IAAI,CAACc;AAAhC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA,4CACGd,IAAI,CAACe,YADR,uDACG,mBAAmBF,GAAnB,CAAwBG,MAAD,IAAY;AAClC,kCACE;AAEE,gBAAA,QAAQ,EAAGN,CAAD,IAAOD,cAAc,CAACC,CAAD,EAAIV,IAAI,CAACC,EAAT,CAFjC;AAGE,gBAAA,SAAS,EAAC,eAHZ;AAAA,wCAKE;AAAO,kBAAA,IAAI,EAAC,OAAZ;AAAoB,kBAAA,KAAK,EAAEe,MAAM,CAACf,EAAlC;AAAsC,kBAAA,IAAI,EAAED,IAAI,CAACC;AAAjD;AAAA;AAAA;AAAA;AAAA,wBALF,eAME;AAAA,4BAAOe,MAAM,CAACC;AAAd;AAAA;AAAA;AAAA;AAAA,wBANF;AAAA,iBACOD,MAAM,CAACf,EADd;AAAA;AAAA;AAAA;AAAA,sBADF;AAUD,aAXA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,SAAUD,IAAI,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA,cADF;AAqBD,KAtBA,CADH,EAwBG,sBAAArB,KAAK,CAACa,SAAN,wEAAiBE,MAAjB,MAA4B,CAA5B,gBACC;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEP,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADD,GAIG,IA5BN;AAAA,kBADF;AAgCD;;GA/DQT,U;UACUF,W,EAESC,W;;;KAHnBC,U;AAiET,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { createGradedQuiz } from \"../../features/gradeSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction QuizViewer(props) {\r\n  const dispatch = useDispatch();\r\n  const [answers, setAnswers] = useState({});\r\n  const { token, userId } = useSelector((state) => state.auth);\r\n\r\n  const handleSubmit = () => {\r\n    let score = 0;\r\n    const answerKeys = Object.keys(answers);\r\n    const { questions } = props;\r\n    for (let i = 0; i < questions?.length; i++) {}\r\n    answerKeys.forEach(function (element) {\r\n      const correctAnswer = questions.filter((item) => item.id == element);\r\n      if (answers[element] == correctAnswer[0].answer) {\r\n        score += 1;\r\n      }\r\n    });\r\n    let total = questions.length;\r\n    let grade = (score / total) * 100;\r\n    const formData = new FormData();\r\n    formData.append(\"total\", total);\r\n    formData.append(\"score\", score);\r\n    formData.append(\"grade\", grade);\r\n    formData.append(\"student\", userId);\r\n    formData.append(\"quiz\", props.quizId);\r\n    dispatch(createGradedQuiz(token, formData));\r\n  };\r\n\r\n  const onChangeAnswer = (e, id) => {\r\n    answers[id] = e.target.value;\r\n    setAnswers({ ...answers });\r\n  };\r\n  return (\r\n    <>\r\n      {props.questions?.map((item) => {\r\n        return (\r\n          <div key={item.id} className=\"quiz__question\">\r\n            <div className=\"question\">{item.question}</div>\r\n            <div className=\"choices\">\r\n              <div className=\"choices__row\">\r\n                {item.choices_data?.map((choice) => {\r\n                  return (\r\n                    <div\r\n                      key={choice.id}\r\n                      onChange={(e) => onChangeAnswer(e, item.id)}\r\n                      className=\"choices__item\"\r\n                    >\r\n                      <input type=\"radio\" value={choice.id} name={item.id} />\r\n                      <span>{choice.name}</span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n      {props.questions?.length !== 0 ? (\r\n        <div className=\"quiz__submit\">\r\n          <button onClick={handleSubmit}>Submit</button>\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default QuizViewer;\r\n"]},"metadata":{},"sourceType":"module"}