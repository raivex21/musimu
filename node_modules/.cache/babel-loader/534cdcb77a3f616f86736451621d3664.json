{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Raivex\\\\Documents\\\\React\\\\Project\\\\gui\\\\src\\\\simulator\\\\Timer.js\";\nimport React, { Component } from \"react\";\nimport c5 from './SoundSource/c5.mp3';\nimport cs5 from './SoundSource/cs5.mp3';\nimport d5 from './SoundSource/d5.mp3';\nimport ds5 from './SoundSource/ds5.mp3';\nimport e5 from './SoundSource/e5.mp3';\nimport f5 from './SoundSource/f5.mp3';\nimport fs5 from './SoundSource/fs5.mp3';\nimport g5 from './SoundSource/g5.mp3';\nimport gs5 from './SoundSource/gs5.mp3';\nimport a5 from './SoundSource/a5.mp3';\nimport as5 from './SoundSource/as5.mp3';\nimport b5 from './SoundSource/b5.mp3';\nimport { Howl, Howler } from 'howler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Timer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startPauseSwitch = () => {\n      let switcher = this.state.switcher;\n      console.log(\"startPauseSwitch\");\n      this.setState({\n        row: this.state.row\n      });\n\n      if (switcher === false) {\n        this.clockStart();\n        this.setState({\n          switcher: true,\n          playIcon: false\n        });\n        this.props.playerIcon(this.state.playIcon);\n      } else {\n        this.clockPause();\n        this.setState({\n          switcher: false,\n          playIcon: true\n        });\n        this.props.playerIcon(this.state.playIcon);\n      }\n    };\n\n    this.getStartingProperties = currentSelected => {\n      console.log(\"getStartingProperties\");\n      let row = this.state.row; // -------- pre render ----------------------------------- FIND STARTING---------------\n\n      for (let i = currentSelected; i >= 0; i--) {\n        // find Starting\n        if (row[i][0].starting === true) {\n          if (row[i][0].clef === null) {\n            let type = 4;\n            let error = 7;\n            let measure = row[i + 1][8].measure;\n            this.props.consoleWarningClef(type, measure, error);\n            break;\n          }\n\n          this.setState({\n            clef: row[i][0].clef,\n            keySig: row[i][0].keySig\n          });\n          break;\n        }\n      }\n    };\n\n    this.row = currentSelected => {\n      let row = this.props.row;\n\n      if (currentSelected < row.length) {\n        let y = 0; // always starts at zero\n\n        while (y < this.props.column) {\n          let a = row[currentSelected][y]; // Add if else condition here later on ----------------if Column's isOpen = false --------------------- \n\n          if (a.isOpen === true) {\n            let source = this.state.source[y];\n            const sound = new Howl({\n              src: [source],\n              sprite: {\n                normal: [0, 6000]\n              }\n            });\n            sound.play(\"normal\");\n          }\n\n          y++;\n        }\n      } else {\n        console.log(\"stoped playing\");\n        this.clockStop();\n      }\n    };\n\n    this.clockPause = () => {\n      clearInterval(this.interval);\n    };\n\n    this.clockStop = () => {\n      this.clockPause();\n      console.log(\"stop\");\n      this.setState({\n        switcher: false,\n        count: 0,\n        inc: 0,\n        playIcon: false\n      });\n      this.props.playerIcon(this.state.playIcon);\n    };\n\n    this.startPauseSwitch = this.startPauseSwitch.bind(this);\n    this.clockStop = this.clockStop.bind(this);\n    this.state = {\n      row: this.props.row,\n      miliSecond: 0,\n      second: 0,\n      minute: 0,\n      hour: 0,\n      switcher: false,\n      playIcon: true,\n      tempo: this.props.tempo,\n      // from user\n      volume: 1,\n      count: 0,\n      // intrement per milisecond\n      restart: 5,\n      // set loop\n      clef: null,\n      keySig: null,\n      inc: 0,\n      source: [b5, as5, a5, gs5, g5, fs5, f5, e5, ds5, d5, cs5, c5]\n    };\n  }\n\n  componentDidMount() {\n    this.props.startPauseSwitch(this.startPauseSwitch);\n    this.props.clockStop(this.clockStop);\n  }\n\n  clockStart() {\n    console.log(\"this.clockStart\");\n    let row = this.state.row;\n    let speed = Math.round(60 / this.props.tempo * 100); // 60 as second; tempo; \n\n    let currentSelected = this.props.currentSelected;\n    let intervals = NaN;\n    this.interval = setInterval(() => {\n      if (currentSelected >= row.length) {\n        this.clockStop();\n        return;\n      }\n\n      if (this.state.count === 0) {\n        if (row[currentSelected][0].starting === true) {\n          this.getStartingProperties(currentSelected);\n\n          if (this.state.clef === null) {\n            console.log(\"clef in null so stop\");\n            this.clockStop();\n            return;\n          }\n\n          intervals = 0;\n        } else {\n          console.log(\"playing row\", currentSelected);\n          intervals = speed / row[currentSelected][0].note;\n          this.row(currentSelected);\n          console.log(currentSelected);\n          intervals = speed / row[currentSelected][0].note;\n          console.log(intervals);\n        }\n\n        currentSelected++;\n      }\n\n      this.setState({\n        count: this.state.count + 1\n      });\n      console.log(intervals);\n\n      if (this.state.count >= intervals) {\n        console.log(\"counter is back to zero\");\n        this.setState({\n          count: 0\n        });\n      }\n    }, 10);\n  }\n\n  render() {\n    Howler.volume(this.props.volume / 100);\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Timer; // import React, { Component } from \"react\";\n// import c5 from './SoundSource/c5.mp3';\n// import cs5 from './SoundSource/cs5.mp3';\n// import d5 from './SoundSource/d5.mp3';\n// import ds5 from './SoundSource/ds5.mp3';\n// import e5 from './SoundSource/e5.mp3';\n// import f5 from './SoundSource/f5.mp3';\n// import fs5 from './SoundSource/fs5.mp3';\n// import g5 from './SoundSource/g5.mp3';\n// import gs5 from './SoundSource/gs5.mp3';\n// import a5 from './SoundSource/a5.mp3';\n// import as5 from './SoundSource/as5.mp3';\n// import b5 from './SoundSource/b5.mp3';\n// import {Howl, Howler} from 'howler';\n// class Timer extends Component {\n//   constructor(props){\n//   super(props);\n//   this.state = {\n//     row: this.props.row,\n//     miliSecond: 0,\n//     second: 0,\n//     minute: 0,\n//     hour: 0,\n//     switcher: false,\n//     playIcon: 'Play ',\n//     tempo: 120, // from user\n//     count: 0, // intrement per milisecond\n//     restart: 5, // set loop\n//     barStart: 1,\n//     noteLength: 4,\n//     Xindex: 0,\n//   }\n// }\n// startPauseSwitch() {\n//   let switcher = this.state.switcher;\n// console.log(\"startPauseSwitch\")\n//   this.setState({\n//     row: this.state.row\n//   })\n//   if (switcher === false) {\n//     this.clockStart();\n//     this.setState({\n//       switcher: true,\n//       playIcon: \"Pause\"\n//       })\n//   }\n//   else {\n//     this.clockPause();\n//     this.setState({\n//     switcher: false,\n//     playIcon: \"Resume\"\n//     })\n//   }\n// }\n// row = () => {\n//   let row = this.props.row;\n//   let rowLength = row.length;\n//   let currentSelected = this.props.currentSelected;\n//   let Xindex = this.state.Xindex;\n//   let currentRow = currentSelected + Xindex;\n//   console.log(\"current row\", currentRow)\n//     if (currentRow < rowLength - 1) {\n//       let y = 0; // always starts at zero\n//       let current = row[currentRow][y  ];\n//       while (y < this.props.column) {\n//         let a = this.props.row[currentRow][y];\n//         // Add if else condition here later on ----------------if Column's isOpen = false --------------------- \n//           if (a.isOpen === true) {\n//             let source = c5;\n//             if (y === 0) { source = b5;}\n//             if (y === 1) { source = as5;}\n//             if (y === 2) { source = a5;}\n//             if (y === 3) { source = gs5;}\n//             if (y === 4) { source = g5;}\n//             if (y === 5) { source = fs5;}\n//             if (y === 6) { source = f5;}\n//             if (y === 7) { source = e5;}\n//             if (y === 8) { source = ds5;}\n//             if (y === 9) { source = d5;}\n//             if (y === 10) { source = cs5;}\n//             if (y === 11) { source = c5;}\n//             const sound = new Howl ({\n//               src: [source],\n//               sprite: {\n//                 c5: [0, 6000],\n//               }\n//             })\n//             sound.play(\"c5\");\n//             console.log(a)}\n//             y++;\n//         }\n//           this.setState( {\n//             noteLength: current.note,\n//             Xindex : Xindex + 1,\n//         })\n//       console.log(\"Note value is\", current.note)\n//     }\n//     else {\n//       this.clockStop();\n//     }\n// }\n// clockStart() {\n//   let speed = Math.round( 60 / this.state.tempo * 100 ); // 60 as second; tempo; \n//   console.log(\"Clock Start\", speed)\n//   this.row();\n//   this.interval = setInterval(() => {\n//     let interval = speed / this.state.noteLength;\n//     this.setState(prevState => ({\n//       count: prevState.count + 1,\n//     }));\n//     console.log(interval)\n//     if (this.state.count >= interval) {\n//       this.setState(prevState => ({\n//           barStart: prevState.barStart + 1,\n//         row: prevState.row + 1,\n//         count: 0,\n//       } ));\n//       this.row();\n//       console.log(\"next note\")\n//     }\n//     if (this.state.barStart === this.state.restart) {    \n//       this.setState(prevState => ({\n//         barStart: prevState.barStart = 1,\n//       }))\n//     };\n//   }, 10)\n// }\n// clockPause(){\n//   clearInterval(this.interval)\n// }\n// clockStop(){\n//   this.clockPause();\n//   this.setState({\n//     switcher: false,\n//     count: 0,\n//     barStart: 0,\n//     Xindex: 0,\n//     playIcon:  \"Play \"\n//   })\n// }\n// getStartingProperties = () =>  {\n//   let row = this.state.row;\n//   let currentSelected = this.props.currentSelected;\n//       // -------- pre render ----------------------------------- FIND STARTING---------------\n//   for (let i = currentSelected; i >= 0; i--) { // find Starting\n//     if (row[i][0].starting === true) {\n//       this.setState ({\n//         clef: row[i][0].clef,\n//         keySig: row[i][0].keySig,\n//       });\n//       break;\n//     }\n//   }\n// }\n// tempo(event){\n//   this.setState({\n//     tempo:parseInt(event.target.value)\n//   })\n// }\n// render () {\n// Howler.volume(1.0)\n//   return (\n//     <div>\n//       <div className=\"container\"> \n//         <p className=\"container-header\">Player</p> \n//           <button onClick={() => this.startPauseSwitch()}>{this.state.playIcon}</button>\n//           <button onClick={() => this.clockStop()}>Stop</button>\n//         Tempo\n//           <input type= \"number\" defaultValue = \"120\" min= \"60\" max= \"200\" onChange={this.tempo.bind(this)}/>\n//       </div>\n//     </div>\n//     )\n// } \n// }","map":{"version":3,"sources":["C:/Users/Raivex/Documents/React/Project/gui/src/simulator/Timer.js"],"names":["React","Component","c5","cs5","d5","ds5","e5","f5","fs5","g5","gs5","a5","as5","b5","Howl","Howler","Timer","constructor","props","startPauseSwitch","switcher","state","console","log","setState","row","clockStart","playIcon","playerIcon","clockPause","getStartingProperties","currentSelected","i","starting","clef","type","error","measure","consoleWarningClef","keySig","length","y","column","a","isOpen","source","sound","src","sprite","normal","play","clockStop","clearInterval","interval","count","inc","bind","miliSecond","second","minute","hour","tempo","volume","restart","componentDidMount","speed","Math","round","intervals","NaN","setInterval","note","render"],"mappings":"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":["import React, { Component } from \"react\";\r\nimport c5 from './SoundSource/c5.mp3';\r\nimport cs5 from './SoundSource/cs5.mp3';\r\nimport d5 from './SoundSource/d5.mp3';\r\nimport ds5 from './SoundSource/ds5.mp3';\r\nimport e5 from './SoundSource/e5.mp3';\r\nimport f5 from './SoundSource/f5.mp3';\r\nimport fs5 from './SoundSource/fs5.mp3';\r\nimport g5 from './SoundSource/g5.mp3';\r\nimport gs5 from './SoundSource/gs5.mp3';\r\nimport a5 from './SoundSource/a5.mp3';\r\nimport as5 from './SoundSource/as5.mp3';\r\nimport b5 from './SoundSource/b5.mp3';\r\n\r\nimport {Howl, Howler} from 'howler';\r\n\r\nclass Timer extends Component {\r\n\r\n  constructor(props){\r\n  super(props);\r\n    \r\n  this.startPauseSwitch = this.startPauseSwitch.bind(this);\r\n  this.clockStop = this.clockStop.bind(this);\r\n  this.state = {\r\n\r\n    row: this.props.row,\r\n\r\n    miliSecond: 0,\r\n    second: 0,\r\n    minute: 0,\r\n    hour: 0,\r\n\r\n    switcher: false,\r\n    playIcon: true,\r\n\r\n    tempo: this.props.tempo, // from user\r\n    volume: 1,\r\n    count: 0, // intrement per milisecond\r\n    restart: 5, // set loop\r\n\r\n    clef: null,\r\n    keySig: null,\r\n    inc: 0,\r\n    source: [b5, as5, a5, gs5, g5, fs5, f5, e5, ds5, d5, cs5, c5]\r\n  }\r\n}\r\n\r\ncomponentDidMount() {\r\n  this.props.startPauseSwitch(this.startPauseSwitch);\r\n  this.props.clockStop(this.clockStop);\r\n\r\n};\r\n\r\nstartPauseSwitch = () => {\r\n\r\n  let switcher = this.state.switcher;\r\nconsole.log(\"startPauseSwitch\")\r\n  this.setState({\r\n    row: this.state.row\r\n  })\r\n\r\n  if (switcher === false) {\r\n    \r\n    this.clockStart();\r\n    this.setState({\r\n      switcher: true,\r\n      playIcon: false\r\n      })\r\n      this.props.playerIcon(this.state.playIcon);\r\n  }\r\n\r\n  else {\r\n    this.clockPause();\r\n    this.setState({\r\n    switcher: false,\r\n    playIcon: true,\r\n    })\r\n    this.props.playerIcon(this.state.playIcon);\r\n  }\r\n};\r\n\r\ngetStartingProperties = (currentSelected) => {\r\n  console.log(\"getStartingProperties\")\r\n    let row = this.state.row;\r\n        // -------- pre render ----------------------------------- FIND STARTING---------------\r\n  \r\n    for (let i = currentSelected; i >= 0; i--) { // find Starting\r\n      if (row[i][0].starting === true) {\r\n        if (row[i][0].clef === null) {\r\n          let type = 4\r\n          let error = 7\r\n          let measure = row[i + 1][8].measure\r\n          this.props.consoleWarningClef(type, measure, error)\r\n          break;\r\n        }\r\n  \r\n        this.setState ({\r\n          clef: row[i][0].clef,\r\n          keySig: row[i][0].keySig,\r\n        });\r\n        break;\r\n      }\r\n    }\r\n};\r\n\r\nrow = (currentSelected) => {\r\n\r\n  let row = this.props.row;\r\n    if (currentSelected < row.length) {\r\n      let y = 0; // always starts at zero\r\n        while (y < this.props.column) {\r\n          let a = row[currentSelected][y];\r\n            // Add if else condition here later on ----------------if Column's isOpen = false --------------------- \r\n          if (a.isOpen === true) {\r\n            let source = this.state.source[y];\r\n            \r\n            const sound = new Howl ({\r\n              src: [source],\r\n              sprite: {\r\n                normal: [0, 6000],\r\n              }\r\n            })\r\n            sound.play(\"normal\");\r\n          }\r\n          y++;\r\n        }\r\n    }\r\n\r\n    else {\r\n      console.log(\"stoped playing\")\r\n      this.clockStop();\r\n    } \r\n}\r\n\r\nclockStart() {\r\nconsole.log(\"this.clockStart\")\r\n  let row = this.state.row;\r\n  let speed = Math.round( 60 / this.props.tempo * 100 ); // 60 as second; tempo; \r\n  let currentSelected = this.props.currentSelected;\r\n  let intervals = NaN;\r\n\r\n\r\n    this.interval = setInterval(() => {\r\n      \r\n      if ( currentSelected >= row.length ) {\r\n        this.clockStop();\r\n        return;\r\n      }\r\n\r\n      if (this.state.count === 0) {\r\n        \r\n        if ( row[currentSelected][0].starting === true ) {\r\n          this.getStartingProperties(currentSelected);\r\n          if (this.state.clef === null) {\r\n            console.log(\"clef in null so stop\")\r\n            this.clockStop();\r\n            \r\n            return;\r\n          }\r\n          intervals = 0;\r\n        }\r\n\r\n        else {\r\n          console.log(\"playing row\", currentSelected)\r\n          intervals = speed / row[currentSelected][0].note;\r\n          this.row(currentSelected);      \r\n          console.log(currentSelected)\r\n          intervals = speed / row[currentSelected][0].note;\r\n          console.log(intervals)\r\n        }\r\n        currentSelected++;\r\n      }\r\n      \r\n      this.setState({\r\n        count: this.state.count + 1,\r\n      });\r\n\r\n      console.log(intervals)\r\n      \r\n      if (this.state.count >= intervals) {\r\n        console.log(\"counter is back to zero\")\r\n        this.setState ({\r\n          count: 0,\r\n        });\r\n      }\r\n    }, 10)\r\n    \r\n}\r\n\r\nclockPause = () => {\r\n  clearInterval(this.interval)\r\n}\r\n\r\nclockStop = () => {\r\n  this.clockPause();\r\n  console.log(\"stop\")\r\n  this.setState({\r\n    switcher: false,\r\n    count: 0,\r\n    inc: 0,\r\n    playIcon:  false,\r\n  })\r\n  this.props.playerIcon(this.state.playIcon);\r\n}\r\n\r\nrender () {\r\n  Howler.volume(this.props.volume / 100)\r\n    return (\r\n\r\n      <div>\r\n\r\n      </div>\r\n\r\n      )\r\n  }\r\n} \r\n\r\nexport default Timer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { Component } from \"react\";\r\n// import c5 from './SoundSource/c5.mp3';\r\n// import cs5 from './SoundSource/cs5.mp3';\r\n// import d5 from './SoundSource/d5.mp3';\r\n// import ds5 from './SoundSource/ds5.mp3';\r\n// import e5 from './SoundSource/e5.mp3';\r\n// import f5 from './SoundSource/f5.mp3';\r\n// import fs5 from './SoundSource/fs5.mp3';\r\n// import g5 from './SoundSource/g5.mp3';\r\n// import gs5 from './SoundSource/gs5.mp3';\r\n// import a5 from './SoundSource/a5.mp3';\r\n// import as5 from './SoundSource/as5.mp3';\r\n// import b5 from './SoundSource/b5.mp3';\r\n\r\n// import {Howl, Howler} from 'howler';\r\n\r\n// class Timer extends Component {\r\n\r\n//   constructor(props){\r\n//   super(props);\r\n//   this.state = {\r\n\r\n//     row: this.props.row,\r\n\r\n//     miliSecond: 0,\r\n//     second: 0,\r\n//     minute: 0,\r\n//     hour: 0,\r\n\r\n//     switcher: false,\r\n//     playIcon: 'Play ',\r\n\r\n//     tempo: 120, // from user\r\n//     count: 0, // intrement per milisecond\r\n//     restart: 5, // set loop\r\n//     barStart: 1,\r\n\r\n//     noteLength: 4,\r\n//     Xindex: 0,\r\n//   }\r\n// }\r\n\r\n// startPauseSwitch() {\r\n\r\n//   let switcher = this.state.switcher;\r\n// console.log(\"startPauseSwitch\")\r\n//   this.setState({\r\n//     row: this.state.row\r\n//   })\r\n\r\n//   if (switcher === false) {\r\n    \r\n//     this.clockStart();\r\n//     this.setState({\r\n//       switcher: true,\r\n//       playIcon: \"Pause\"\r\n//       })\r\n      \r\n//   }\r\n\r\n//   else {\r\n//     this.clockPause();\r\n//     this.setState({\r\n//     switcher: false,\r\n//     playIcon: \"Resume\"\r\n//     })\r\n//   }\r\n// }\r\n\r\n// row = () => {\r\n\r\n//   let row = this.props.row;\r\n//   let rowLength = row.length;\r\n//   let currentSelected = this.props.currentSelected;\r\n//   let Xindex = this.state.Xindex;\r\n//   let currentRow = currentSelected + Xindex;\r\n//   console.log(\"current row\", currentRow)\r\n\r\n//     if (currentRow < rowLength - 1) {\r\n\r\n//       let y = 0; // always starts at zero\r\n//       let current = row[currentRow][y  ];\r\n\r\n//       while (y < this.props.column) {\r\n//         let a = this.props.row[currentRow][y];\r\n\r\n//         // Add if else condition here later on ----------------if Column's isOpen = false --------------------- \r\n//           if (a.isOpen === true) {\r\n\r\n//             let source = c5;\r\n\r\n//             if (y === 0) { source = b5;}\r\n//             if (y === 1) { source = as5;}\r\n//             if (y === 2) { source = a5;}\r\n//             if (y === 3) { source = gs5;}\r\n//             if (y === 4) { source = g5;}\r\n//             if (y === 5) { source = fs5;}\r\n//             if (y === 6) { source = f5;}\r\n//             if (y === 7) { source = e5;}\r\n//             if (y === 8) { source = ds5;}\r\n//             if (y === 9) { source = d5;}\r\n//             if (y === 10) { source = cs5;}\r\n//             if (y === 11) { source = c5;}\r\n\r\n//             const sound = new Howl ({\r\n//               src: [source],\r\n//               sprite: {\r\n//                 c5: [0, 6000],\r\n//               }\r\n//             })\r\n//             sound.play(\"c5\");\r\n\r\n            \r\n            \r\n//             console.log(a)}\r\n//             y++;\r\n//         }\r\n\r\n//           this.setState( {\r\n//             noteLength: current.note,\r\n//             Xindex : Xindex + 1,\r\n//         })\r\n//       console.log(\"Note value is\", current.note)\r\n//     }\r\n\r\n//     else {\r\n//       this.clockStop();\r\n//     }\r\n// }\r\n\r\n// clockStart() {\r\n\r\n//   let speed = Math.round( 60 / this.state.tempo * 100 ); // 60 as second; tempo; \r\n//   console.log(\"Clock Start\", speed)\r\n//   this.row();\r\n\r\n//   this.interval = setInterval(() => {\r\n//     let interval = speed / this.state.noteLength;\r\n\r\n//     this.setState(prevState => ({\r\n//       count: prevState.count + 1,\r\n//     }));\r\n//     console.log(interval)\r\n\r\n//     if (this.state.count >= interval) {\r\n//       this.setState(prevState => ({\r\n//           barStart: prevState.barStart + 1,\r\n//         row: prevState.row + 1,\r\n//         count: 0,\r\n//       } ));\r\n      \r\n//       this.row();\r\n//       console.log(\"next note\")\r\n//     }\r\n\r\n//     if (this.state.barStart === this.state.restart) {    \r\n//       this.setState(prevState => ({\r\n//         barStart: prevState.barStart = 1,\r\n//       }))\r\n//     };\r\n\r\n//   }, 10)\r\n  \r\n// }\r\n\r\n// clockPause(){\r\n//   clearInterval(this.interval)\r\n// }\r\n\r\n// clockStop(){\r\n//   this.clockPause();\r\n//   this.setState({\r\n//     switcher: false,\r\n//     count: 0,\r\n//     barStart: 0,\r\n//     Xindex: 0,\r\n//     playIcon:  \"Play \"\r\n//   })\r\n\r\n// }\r\n\r\n// getStartingProperties = () =>  {\r\n\r\n//   let row = this.state.row;\r\n//   let currentSelected = this.props.currentSelected;\r\n//       // -------- pre render ----------------------------------- FIND STARTING---------------\r\n\r\n//   for (let i = currentSelected; i >= 0; i--) { // find Starting\r\n\r\n//     if (row[i][0].starting === true) {\r\n\r\n//       this.setState ({\r\n//         clef: row[i][0].clef,\r\n//         keySig: row[i][0].keySig,\r\n//       });\r\n//       break;\r\n//     }\r\n//   }\r\n\r\n// }\r\n\r\n// tempo(event){\r\n//   this.setState({\r\n//     tempo:parseInt(event.target.value)\r\n//   })\r\n\r\n// }\r\n\r\n// render () {\r\n// Howler.volume(1.0)\r\n//   return (\r\n\r\n//     <div>\r\n//       <div className=\"container\"> \r\n//         <p className=\"container-header\">Player</p> \r\n//           <button onClick={() => this.startPauseSwitch()}>{this.state.playIcon}</button>\r\n//           <button onClick={() => this.clockStop()}>Stop</button>\r\n//         Tempo\r\n//           <input type= \"number\" defaultValue = \"120\" min= \"60\" max= \"200\" onChange={this.tempo.bind(this)}/>\r\n//       </div>\r\n//     </div>\r\n\r\n//     )\r\n// } \r\n\r\n// } \r\n"]},"metadata":{},"sourceType":"module"}